#!/usr/bin/python

from pymongo import MongoClient
import datetime
import time
from datadog import initialize,api

options = {'api_key':'<%= @api_key %>'}
initialize(**options)

def get_flow_execution_time():
	min_time = 10000000000000.00
	max_time = 0
	total_execution_time = 0
	counter = 0
	yesterday = datetime.datetime.now() - datetime.timedelta(days=1)

	client = MongoClient('mongo0.<%= @t_environment %>.internal-tipaas.com',27017)
	dbs = client.database_names()

	for db in dbs:
		database = client[db]
		cursor = list(database.RT_FlowActivityJournal.find({"startTimestamp":{"$gte": datetime.datetime(int(yesterday.strftime("%Y")), int(yesterday.strftime("%m")), int(yesterday.strftime("%d"))),"$lt":datetime.datetime(int(time.strftime("%Y")), int(time.strftime("%m")), int(time.strftime("%d")))},"flowStatus":"EXECUTION_SUCCESS"},{"startTimestamp":1,"finishTimestamp":1}))	
		for doc in cursor:
			diff = (doc['finishTimestamp'] - doc['startTimestamp']).total_seconds()
			if min_time > diff:
				min_time = diff
			if max_time < diff:
				max_time = diff
			total_execution_time+=diff
			counter+=1	
	return min_time, max_time, (total_execution_time/counter)


if __name__ == '__main__':
	mintime, maxtime, avgtime = get_flow_execution_time()
	api.Metric.send(metric="number.min.flow.time", points=mintime, tags="Minimum execution time for a flow", type='counter')
	api.Metric.send(metric="number.max.flow.time", points=maxtime, tags="Maximum execution time for a flow", type='counter')
	api.Metric.send(metric="number.avg.flow.time", points=avgtime, tags="Average execution time for a flow", type='counter')
